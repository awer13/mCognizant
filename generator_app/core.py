# generator_app/core.py
import pkgutil, importlib, inspect

class TaskController:
    """
    –Ø–¥—Ä–æ-–¥–∏—Å–ø–µ—Ç—á–µ—Ä. –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –≤—ã–∑–æ–≤–æ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤.
    –£–º–µ–µ—Ç –∞–≤—Ç–æ–ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏–∑ –ø–∞–∫–µ—Ç–∞ generator_app.generators.
    """
    def __init__(self):
        self._generators = {}
        print("‚úÖ –Ø–¥—Ä–æ (TaskController) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")

    def register_generator(self, task_type: str, generator_class):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä."""
        self._generators[task_type] = generator_class
        label = getattr(generator_class, "LABEL", task_type)
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ—Å—Ç–∞–≤–∏–º TASK_TYPE –≤ –∫–ª–∞—Å—Å, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
        if not getattr(generator_class, "TASK_TYPE", None):
            setattr(generator_class, "TASK_TYPE", task_type)
        print(f"  -> –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è '{task_type}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (label='{label}').")

    def topics(self):
        """–°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è UI: [{'id': 'series_class_1', 'label': '...'}, ...]"""
        items = [{"id": k, "label": getattr(v, "LABEL", k)} for k, v in self._generators.items()]
        # –º–æ–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ label
        return sorted(items, key=lambda x: x["label"])

    def create_task(self, task_type: str, complexity: int):
        generator_class = self._generators.get(task_type)
        if not generator_class:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç–∏–ø–∞ '{task_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None
        generator_instance = generator_class()
        print(f"‚öôÔ∏è –Ø–¥—Ä–æ: –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ '{task_type}'...")
        return generator_instance.generate()

    # === –ê–í–¢–û–ü–û–ò–°–ö –ì–ï–ù–ï–†–ê–¢–û–†–û–í ===
    def autodiscover_generators(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ generator_app.generators –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–≤–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞:
        1) –í –º–æ–¥—É–ª–µ –µ—Å—Ç—å –∫–ª–∞—Å—Å—ã —Å –º–µ—Ç–æ–¥–æ–º generate() –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–º TASK_TYPE (–∏ –æ–ø—Ü. LABEL)
        2) –í –º–æ–¥—É–ª–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω —Å–ø–∏—Å–æ–∫ __all_generators__ = [(task_type, Class), ...]
        """
        from . import generators as gens_pkg
        base_pkg_name = gens_pkg.__name__
        print("üîé –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤", base_pkg_name)

        for m in pkgutil.iter_modules(gens_pkg.__path__):
            mod_name = f"{base_pkg_name}.{m.name}"
            try:
                module = importlib.import_module(mod_name)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {mod_name}: {e}")
                continue

            # –ü–∞—Ç—Ç–µ—Ä–Ω 2: —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (task_type, class)
            pairs = getattr(module, "__all_generators__", None)
            if pairs:
                for task_type, cls in pairs:
                    try:
                        self.register_generator(task_type, cls)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {task_type} –∏–∑ {mod_name}: {e}")
                continue

            # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –∏—â–µ–º –∫–ª–∞—Å—Å—ã —Å TASK_TYPE + generate()
            for _, obj in inspect.getmembers(module, inspect.isclass):
                if obj.__module__ != module.__name__:
                    continue
                task_type = getattr(obj, "TASK_TYPE", None)
                if task_type and callable(getattr(obj, "generate", None)):
                    try:
                        self.register_generator(task_type, obj)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {task_type} –∏–∑ {mod_name}: {e}")
