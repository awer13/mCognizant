# Generated by Django 5.2.4 on 2025-09-03 09:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0002_classgroup_enroll_code_groupmembership_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Без названия', max_length=200)),
                ('num_questions', models.PositiveIntegerField(default=5)),
                ('max_score', models.PositiveIntegerField(default=100)),
                ('state', models.CharField(choices=[('DRAFT', 'Черновик'), ('PUBLISHED', 'Опубликован')], default='DRAFT', max_length=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='courses.classgroup')),
            ],
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('total_score', models.FloatField(default=0)),
                ('total_percent', models.FloatField(default=0)),
                ('variant_seed', models.IntegerField(blank=True, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to=settings.AUTH_USER_MODEL)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='exams.test')),
            ],
            options={
                'unique_together': {('test', 'student', 'started_at')},
            },
        ),
        migrations.CreateModel(
            name='TestAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_order', models.PositiveIntegerField()),
                ('subq_key', models.CharField(max_length=64)),
                ('value', models.TextField(blank=True, default='')),
                ('is_correct', models.BooleanField(default=False)),
                ('score_awarded', models.FloatField(default=0)),
                ('max_score', models.FloatField(default=0)),
                ('feedback', models.TextField(blank=True, default='')),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='exams.testattempt')),
            ],
            options={
                'ordering': ['question_order', 'subq_key'],
                'unique_together': {('attempt', 'question_order', 'subq_key')},
            },
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('topic_id', models.CharField(max_length=64)),
                ('payload_json', models.JSONField(blank=True, default=dict)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='exams.test')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('test', 'order')},
            },
        ),
    ]
